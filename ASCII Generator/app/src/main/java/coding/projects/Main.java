/*
 * This source file was generated by the Gradle 'init' task
 */

package coding.projects;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class Main {
    public static void main(String[] args) {

        String fileName = "C:\\Users\\evanz\\Pictures\\Screenshots\\Screenshot 2025-05-20 170059.png";
        int scale = 8;

        BufferedImage input = null;
        try {
            input = ImageIO.read(new File(fileName));
            System.out.println("image loaded successfully");
        } catch (IOException e) {
            e.printStackTrace();
        }

        int width = input.getWidth();
        int height = input.getHeight();

        BufferedImage contrasted = increaseContrast(input, 5f);

        Image temp = contrasted.getScaledInstance(width / scale, height / scale, Image.SCALE_DEFAULT);
        BufferedImage shrunk = new BufferedImage(width / scale, height / scale, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g2d = shrunk.createGraphics();
        g2d.drawImage(temp, 0, 0, null);
        g2d.dispose();

        width = shrunk.getWidth();
        height = shrunk.getHeight();
        BufferedImage grayscale = getGrayscale(shrunk);
        
        

        char[][] ASCII = new char[height][width];
        String asciiRamp = "@%#*+=-:. ";

        for (int row = 0; row < height; row++) {
            for (int col = 0; col < width; col++) {
                int gray = grayscale.getRGB(col, row) & 0xFF;
                int index = Math.min(gray * asciiRamp.length() / 256, asciiRamp.length() - 1);
                ASCII[row][col] = asciiRamp.charAt(index);
                System.out.print(ASCII[row][col]);  // cleaner reuse
            }
            System.out.println();  // single newline
        }

        
    }

    public static void showImage(BufferedImage img) {
        JFrame frame = new JFrame("Image Display");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(img.getWidth(), img.getHeight());

        JPanel panel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(img, 0, 0, this);
            }
        };

        frame.add(panel);
        frame.setVisible(true);
    }

    public static BufferedImage increaseContrast(BufferedImage src, float contrast) {
        BufferedImage result = new BufferedImage(src.getWidth(), src.getHeight(), src.getType());

        // Normalize contrast factor: contrast = 1.0 keeps it same; >1 increases, <1 decreases
        float factor = (259 * (contrast + 255)) / (255 * (259 - contrast));

        for (int y = 0; y < src.getHeight(); y++) {
            for (int x = 0; x < src.getWidth(); x++) {
                Color original = new Color(src.getRGB(x, y));

                int r = truncate(factor * (original.getRed() - 128) + 128);
                int g = truncate(factor * (original.getGreen() - 128) + 128);
                int b = truncate(factor * (original.getBlue() - 128) + 128);

                Color newColor = new Color(r, g, b);
                result.setRGB(x, y, newColor.getRGB());
            }
        }

        return result;
    }

    private static int truncate(float value) {
        return Math.min(Math.max((int)value, 0), 255);
    }


    public static BufferedImage getGrayscale (BufferedImage in) {
        BufferedImage out = new BufferedImage(in.getWidth(), in.getHeight(), BufferedImage.TYPE_BYTE_GRAY);

        Graphics g = out.getGraphics();
        g.drawImage(in, 0, 0, null);
        g.dispose();
        return out;
    }
}
